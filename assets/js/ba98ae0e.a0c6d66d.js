"use strict";(self.webpackChunktrinity_validator=self.webpackChunktrinity_validator||[]).push([[744],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,m=p["".concat(i,".").concat(h)]||p[h]||d[h]||o;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1201:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={title:"Run the Full Node",sidebar_position:5},s="Running the Full Node",l={unversionedId:"validator/node-run",id:"validator/node-run",title:"Run the Full Node",description:"When setting up a validator and joining a blockchain network, there are typically two main states that a node needs to synchronize with the network: block sync and state sync",source:"@site/docs/validator/node-run.md",sourceDirName:"validator",slug:"/validator/node-run",permalink:"/trinity-validator-website/docs/validator/node-run",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/validator/node-run.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Run the Full Node",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Install and Configure Full Node",permalink:"/trinity-validator-website/docs/validator/node-setup"},next:{title:"Become a Validator",permalink:"/trinity-validator-website/docs/validator/validator-tx"}},i={},c=[{value:"Block Sync",id:"block-sync",level:2},{value:"State Sync",id:"state-sync",level:2},{value:"1st Option (from Sentinel Guide)",id:"1st-option-from-sentinel-guide",level:3},{value:"2nd Option (from Community)",id:"2nd-option-from-community",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"running-the-full-node"},"Running the Full Node"),(0,r.kt)("p",null,"When setting up a validator and joining a blockchain network, there are typically two main states that a node needs to synchronize with the network: block sync and state sync"),(0,r.kt)("h2",{id:"block-sync"},"Block Sync"),(0,r.kt)("p",null,"Block sync is the process of downloading and verifying blocks from the blockchain. When a validator joins a network, it needs to download the entire blockchain starting from the genesis block to the most recent block in order to participate in block validation. Block sync involves downloading blocks from other nodes in the network, verifying the cryptographic signatures of those blocks, and storing them in local storage."),(0,r.kt)("p",null,"Start the node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl start sentinelhub\n")),(0,r.kt)("p",null,"Use this command to check logs in real time"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo journalctl -u sentinelhub.service -f\n")),(0,r.kt)("h2",{id:"state-sync"},"State Sync"),(0,r.kt)("p",null,"State sync is the process of downloading the current state of the blockchain. When a validator joins a network, it needs to download the current state of the blockchain in order to validate new blocks. The current state includes all account balances, contract code, and contract storage. State sync is a more efficient way to get up to speed with the current state of the network, as it only downloads the necessary information rather than downloading the entire blockchain. To to state sync there 2 options (I have used he second one)."),(0,r.kt)("h3",{id:"1st-option-from-sentinel-guide"},"1st Option (from Sentinel Guide)"),(0,r.kt)("p",null,"Get the trusted block height and hash"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'RPC_ADDRESS="https://rpc.sentinel.co:443"\nLATEST_HEIGHT=$(curl -s "$RPC_ADDRESS/block" | jq -r \'.result.block.header.height\')\nTRUST_HEIGHT=$((LATEST_HEIGHT - 3600))\nTRUST_HASH=$(curl -s "$RPC_ADDRESS/block?height=$TRUST_HEIGHT" | jq -r \'.result.block_id.hash\')\n\necho ${TRUST_HEIGHT}\necho ${TRUST_HASH}\n')),(0,r.kt)("p",null,"Setup environment variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export SENTINELHUB_P2P_MAX_NUM_OUTBOUND_PEERS=200\nexport SENTINELHUB_STATESYNC_ENABLE=true\nexport SENTINELHUB_STATESYNC_RPC_SERVERS="https://sentinel-rpc.badgerbite.io:443,https://rpc.mathnodes.com:443,https://rpc.sentinel.co:443"\nexport SENTINELHUB_STATESYNC_TRUST_HEIGHT=${TRUST_HEIGHT}\nexport SENTINELHUB_STATESYNC_TRUST_HASH=${TRUST_HASH}\n')),(0,r.kt)("p",null,"Start the node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl start sentinelhub\n")),(0,r.kt)("p",null,"Use this command to check logs in real time"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo journalctl -u sentinelhub.service -f\n")),(0,r.kt)("h3",{id:"2nd-option-from-community"},"2nd Option (from Community)"),(0,r.kt)("p",null,"Copy this script that you can also find ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/MathNodes/state-sync/blob/main/state-sync.sh"},"here"),". This script ensures that the synchronization process starts from a point slightly before the absolute latest block. This provides a margin of safety and avoid potential synchronization issues that might occur due to due network delays or other factors."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nSNAP_RPC="https://rpc.sentinel.co:443"\nSNAP_RPC2="https://rpc-sentinel.whispernode.com:443"\n\nLATEST_HEIGHT=$(curl -s $SNAP_RPC/block | jq -r .result.block.header.height); \\\nBLOCK_HEIGHT=$((LATEST_HEIGHT - 1000)); \\\nTRUST_HASH=$(curl -s "$SNAP_RPC/block?height=$BLOCK_HEIGHT" | jq -r .result.block_id.hash)\n\nsed -i.bak -E "s|^(enable[[:space:]]+=[[:space:]]+).*$|\\1true| ; \\\ns|^(rpc_servers[[:space:]]+=[[:space:]]+).*$|\\1\\"$SNAP_RPC,$SNAP_RPC2\\"| ; \\\ns|^(trust_height[[:space:]]+=[[:space:]]+).*$|\\1$BLOCK_HEIGHT| ; \\\ns|^(trust_hash[[:space:]]+=[[:space:]]+).*$|\\1\\"$TRUST_HASH\\"|" $HOME/.sentinelhub/config/config.toml\n\ncp $HOME/.sentinelhub/data/priv_validator_state.json $HOME/.sentinelhub/priv_validator_state.json.backup\n\nrm -rf $HOME/.sentinelhub/data\nmkdir $HOME/.sentinelhub/data\ncp $HOME/.sentinelhub/priv_validator_state.json.backup $HOME/.sentinelhub/data/priv_validator_state.json\n')),(0,r.kt)("p",null,"Create a file and paste the script in it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano state-sync.sh\n")),(0,r.kt)("p",null,"Make the file executable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x state-sync.sh\n")),(0,r.kt)("p",null,"Launch the script"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./state-sync.sh\n")),(0,r.kt)("p",null,"Start the node WITHOUT using systemd"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sentinelhub start\n")),(0,r.kt)("p",null,"Let the node sync fully and periodically check with this command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --silent "http://localhost:26657/status" | jq -S\n')),(0,r.kt)("p",null,"if ",(0,r.kt)("inlineCode",{parentName:"p"},"result.sync_info.catching_up")," value is ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," that means the node is synchronized, so you can now stop the node by pressing ",(0,r.kt)("inlineCode",{parentName:"p"},"CTRL+C")),(0,r.kt)("p",null,"Start the node WITH systemd"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl start sentinelhub\n")),(0,r.kt)("p",null,"Use this command to check logs in real time"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo journalctl -u sentinelhub.service -f\n")))}d.isMDXComponent=!0}}]);