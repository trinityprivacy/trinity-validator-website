"use strict";(self.webpackChunktrinity_validator=self.webpackChunktrinity_validator||[]).push([[9102],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},v=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(n),v=r,d=p["".concat(l,".").concat(v)]||p[v]||m[v]||s;return n?o.createElement(d,i(i({ref:t},u),{},{components:n})):o.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=v;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[p]="string"==typeof e?e:r,i[1]=a;for(var c=2;c<s;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}v.displayName="MDXCreateElement"},6719:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const s={title:"Setup & Config",sidebar_position:2},i="Setup & Config",a={unversionedId:"validator/cosmovisor/setup-config",id:"validator/cosmovisor/setup-config",title:"Setup & Config",description:"Installation",source:"@site/docs/validator/cosmovisor/setup-config.md",sourceDirName:"validator/cosmovisor",slug:"/validator/cosmovisor/setup-config",permalink:"/trinity-validator-website/docs/validator/cosmovisor/setup-config",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/validator/cosmovisor/setup-config.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Setup & Config",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/trinity-validator-website/docs/validator/cosmovisor/overview"},next:{title:"Chain Upgrade",permalink:"/trinity-validator-website/docs/validator/cosmovisor/chain-upgrade"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Environment Setup",id:"environment-setup",level:2},{value:"Set Up Cosmovisor Service",id:"set-up-cosmovisor-service",level:2},{value:"Start Cosmovisor Service",id:"start-cosmovisor-service",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setup--config"},"Setup & Config"),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Install Cosmovisor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@latest\n")),(0,r.kt)("p",null,"(You may also refer to the Cosmovisor ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cosmos/cosmos-sdk/tree/main/tools/cosmovisor#installation"},"installation instructions"),")"),(0,r.kt)("h2",{id:"environment-setup"},"Environment Setup"),(0,r.kt)("p",null,"Create the required directories inside your ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.sentinelhub")," folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p ~/.sentinelhub/cosmovisor\nmkdir -p ~/.sentinelhub/cosmovisor/genesis\nmkdir -p ~/.sentinelhub/cosmovisor/genesis/bin\nmkdir -p ~/.sentinelhub/cosmovisor/upgrades\n")),(0,r.kt)("p",null,"Set the environment variables based on your shell type (can be ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.profile")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.bashrc"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'echo "# Setup Cosmovisor" >> ~/.bashrc\necho "export DAEMON_NAME=sentinelhub" >> ~/.bashrc\necho "export DAEMON_HOME=$HOME/.sentinelhub" >> ~/.bashrc\necho "export DAEMON_ALLOW_DOWNLOAD_BINARIES=false" >> ~/.bashrc\necho "export DAEMON_LOG_BUFFER_SIZE=512" >> ~/.bashrc\necho "export DAEMON_RESTART_AFTER_UPGRADE=true" >> ~/.bashrc\necho "export UNSAFE_SKIP_BACKUP=true" >> ~/.bashrc\nsource ~/.bashrc\n')),(0,r.kt)("p",null,"You may leave out ",(0,r.kt)("inlineCode",{parentName:"p"},"UNSAFE_SKIP_BACKUP=true"),", however the backup takes a decent amount of time and public snapshots of old states are available."),(0,r.kt)("p",null,"Copy the current ",(0,r.kt)("inlineCode",{parentName:"p"},"sentinelhub")," binary into the ",(0,r.kt)("inlineCode",{parentName:"p"},"cosmovisor/genesis")," folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cp $GOPATH/bin/sentinelhub ~/.sentinelhub/cosmovisor/genesis/bin\n")),(0,r.kt)("p",null,"Now check the cosmovisor version"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cosmovisor version\n")),(0,r.kt)("p",null,"You will get something like that:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'cosmovisor version: v1.5.0\n11:03AM INF running app args=["version"] module=cosmovisor path=/home/sentinel/.sentinelhub/cosmovisor/genesis/bin/sentinelhub\n0.10.1\n')),(0,r.kt)("p",null,"To check your work, check sentinelhub version to confirm it matches with cosmovisor version"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sentinelhub version\n")),(0,r.kt)("p",null,"If you get ",(0,r.kt)("inlineCode",{parentName:"p"},"0.10.1")," (which is the current version at the time of writing) everything went fine"),(0,r.kt)("h2",{id:"set-up-cosmovisor-service"},"Set Up Cosmovisor Service"),(0,r.kt)("p",null,"Set up a service to allow Cosmovisor to run in the background as well as restart automatically if it runs into any problems:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano cosmovisor.service\n")),(0,r.kt)("p",null,"Add the following block:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=cosmovisor.service",title:"cosmovisor.service"},'[Unit]\nDescription=Cosmovisor Daemon\nAfter=network-online.target\n[Service]\nEnvironment="DAEMON_NAME=sentinelhub"\nEnvironment="DAEMON_HOME=/home/your-user/.sentinelhub"\nEnvironment="DAEMON_RESTART_AFTER_UPGRADE=true"\nEnvironment="DAEMON_ALLOW_DOWNLOAD_BINARIES=false"\nEnvironment="DAEMON_LOG_BUFFER_SIZE=512"\nEnvironment="UNSAFE_SKIP_BACKUP=true"\nUser=your-user\nExecStart=/home/your-user/go/bin/cosmovisor run start\nRestart=always\nRestartSec=3\nLimitNOFILE=infinity\nLimitNPROC=infinity\n[Install]\nWantedBy=multi-user.target\n')),(0,r.kt)("h2",{id:"start-cosmovisor-service"},"Start Cosmovisor Service"),(0,r.kt)("p",null,"Reload the daemon, stop ",(0,r.kt)("inlineCode",{parentName:"p"},"sentinelhub.service"),", enable and start ",(0,r.kt)("inlineCode",{parentName:"p"},"cosmovisor.service"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsudo systemctl stop sentinelhub.service\nsudo systemctl enable cosmovisor.service\nsudo systemctl start cosmovisor.service\n")),(0,r.kt)("p",null,"Check the status of the service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl status cosmovisor.service\n")),(0,r.kt)("p",null,"To see live logs of the service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"journalctl -u cosmovisor.service -f\n")),(0,r.kt)("p",null,"If everything went fine you can either disable or remove ",(0,r.kt)("inlineCode",{parentName:"p"},"sentinelhub.service")," as you do not need it anymore"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl disable sentinelhub.service\nsudo rm -f sentinelhub.service\n")))}m.isMDXComponent=!0}}]);